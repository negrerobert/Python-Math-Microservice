<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/test_advanced_features.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_advanced_features.py" />
              <option name="originalContent" value="import requests&#10;import time&#10;import json&#10;&#10;base_url = &quot;http://127.0.0.1:8000/api/v1/math&quot;&#10;&#10;def test_caching_performance():&#10;    &quot;&quot;&quot;Test cache performance with repeated requests&quot;&quot;&quot;&#10;    print(&quot; Testing Cache Performance...&quot;)&#10;&#10;    # Test same calculation multiple times&#10;    test_cases = [&#10;        {&quot;endpoint&quot;: &quot;power&quot;, &quot;data&quot;: {&quot;base&quot;: 2, &quot;exponent&quot;: 10}},&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: 30}},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {&quot;n&quot;: 10}}&#10;    ]&#10;&#10;    for case in test_cases:&#10;        print(f&quot;\n--- Testing {case['endpoint']} caching ---&quot;)&#10;        endpoint = f&quot;{base_url}/{case['endpoint']}&quot;&#10;&#10;        # First request (cache miss)&#10;        start = time.time()&#10;        response1 = requests.post(endpoint, json=case['data'])&#10;        time1 = time.time() - start&#10;&#10;        # Second request (should be cache hit)&#10;        start = time.time()&#10;        response2 = requests.post(endpoint, json=case['data'])&#10;        time2 = time.time() - start&#10;&#10;        # Third request (should also be cache hit)&#10;        start = time.time()&#10;        response3 = requests.post(endpoint, json=case['data'])&#10;        time3 = time.time() - start&#10;&#10;        print(f&quot;First request (cache miss):  {time1*1000:.2f}ms&quot;)&#10;        print(f&quot;Second request (cache hit):  {time2*1000:.2f}ms&quot;)&#10;        print(f&quot;Third request (cache hit):   {time3*1000:.2f}ms&quot;)&#10;&#10;        if response1.status_code == 200:&#10;            result = response1.json()['result']&#10;            print(f&quot;Result: {result}&quot;)&#10;            print(f&quot;Speed improvement: {((time1-time2)/time1*100):.1f}%&quot;)&#10;        else:&#10;            print(f&quot;Error: {response1.text}&quot;)&#10;&#10;def test_cache_management():&#10;    &quot;&quot;&quot;Test cache management endpoints&quot;&quot;&quot;&#10;    print(&quot;\n Testing Cache Management...&quot;)&#10;&#10;    # Get cache stats&#10;    response = requests.get(f&quot;{base_url}/cache/stats&quot;)&#10;    if response.status_code == 200:&#10;        stats = response.json()&#10;        print(f&quot;Cache Stats: {json.dumps(stats, indent=2)}&quot;)&#10;&#10;    # Get cache info&#10;    response = requests.get(f&quot;{base_url}/cache/info&quot;)&#10;    if response.status_code == 200:&#10;        info = response.json()&#10;        print(f&quot;Cache has {info['total_keys']} keys&quot;)&#10;        print(f&quot;Hit rate: {info['stats']['hit_rate_percent']}%&quot;)&#10;&#10;    # Clear cache&#10;    response = requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;    if response.status_code == 200:&#10;        result = response.json()&#10;        print(f&quot;Cache cleared: {result['message']}&quot;)&#10;&#10;def test_error_handling():&#10;    &quot;&quot;&quot;Test enhanced error handling&quot;&quot;&quot;&#10;    print(&quot;\n⚠️  Testing Error Handling...&quot;)&#10;&#10;    error_cases = [&#10;        {&quot;endpoint&quot;: &quot;power&quot;, &quot;data&quot;: {&quot;base&quot;: 2, &quot;exponent&quot;: 1000}, &quot;description&quot;: &quot;Power overflow&quot;},&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: -5}, &quot;description&quot;: &quot;Negative fibonacci&quot;},&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: 2000}, &quot;description&quot;: &quot;Fibonacci too large&quot;},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {&quot;n&quot;: -1}, &quot;description&quot;: &quot;Negative factorial&quot;},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {&quot;n&quot;: 200}, &quot;description&quot;: &quot;Factorial too large&quot;},&#10;    ]&#10;&#10;    for case in error_cases:&#10;        endpoint = f&quot;{base_url}/{case['endpoint']}&quot;&#10;        response = requests.post(endpoint, json=case['data'])&#10;&#10;        print(f&quot;\n{case['description']}:&quot;)&#10;        print(f&quot;Status Code: {response.status_code}&quot;)&#10;        if response.status_code != 200:&#10;            error_detail = response.json()&#10;            print(f&quot;Error Type: {error_detail.get('error_type', 'Unknown')}&quot;)&#10;            print(f&quot;Message: {error_detail.get('error', 'No message')}&quot;)&#10;&#10;def test_validation_errors():&#10;    &quot;&quot;&quot;Test input validation errors&quot;&quot;&quot;&#10;    print(&quot;\n Testing Input Validation...&quot;)&#10;&#10;    validation_cases = [&#10;        {&quot;endpoint&quot;: &quot;power&quot;, &quot;data&quot;: {&quot;base&quot;: &quot;not_a_number&quot;, &quot;exponent&quot;: 2}},&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: &quot;invalid&quot;}},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {}},  # Missing required field&#10;    ]&#10;&#10;    for case in validation_cases:&#10;        endpoint = f&quot;{base_url}/{case['endpoint']}&quot;&#10;        response = requests.post(endpoint, json=case['data'])&#10;&#10;        print(f&quot;\nTesting {case['endpoint']} with invalid data:&quot;)&#10;        print(f&quot;Status Code: {response.status_code}&quot;)&#10;        if response.status_code == 422:&#10;            error_detail = response.json()&#10;            print(f&quot;Validation errors: {len(error_detail.get('details', []))}&quot;)&#10;&#10;def test_performance_monitoring():&#10;    &quot;&quot;&quot;Test performance monitoring features&quot;&quot;&quot;&#10;    print(&quot;\n Testing Performance Monitoring...&quot;)&#10;&#10;    # Make several requests to generate data&#10;    for i in range(5):&#10;        requests.post(f&quot;{base_url}/power&quot;, json={&quot;base&quot;: 2, &quot;exponent&quot;: i+1})&#10;        requests.post(f&quot;{base_url}/fibonacci&quot;, json={&quot;n&quot;: i*2})&#10;&#10;    # Check operation stats&#10;    response = requests.get(f&quot;{base_url}/stats&quot;)&#10;    if response.status_code == 200:&#10;        stats = response.json()&#10;        print(&quot;Operation Statistics:&quot;)&#10;        for stat in stats:&#10;            print(f&quot;  {stat['operation']}: {stat['total_requests']} requests, &quot;&#10;                  f&quot;{stat['success_rate']}% success, &quot;&#10;                  f&quot;{stat['avg_execution_time_ms']}ms avg&quot;)&#10;&#10;    # Check history&#10;    response = requests.get(f&quot;{base_url}/history?page_size=5&quot;)&#10;    if response.status_code == 200:&#10;        history = response.json()&#10;        print(f&quot;\nRecent History ({history['total_records']} total records):&quot;)&#10;        for req in history['requests'][:3]:&#10;            # Handle None results for failed operations&#10;            result_display = req['result'] if req['result'] is not None else &quot;FAILED&quot;&#10;            success_indicator = &quot;✓&quot; if req['success'] else &quot;✗&quot;&#10;            exec_time = req.get('execution_time_ms', 0) or 0&#10;            print(f&quot;  {success_indicator} {req['operation']}: {result_display} &quot;&#10;                  f&quot;({exec_time:.3f}ms)&quot;)&#10;&#10;    # Test cache info endpoint (this was failing before)&#10;    response = requests.get(f&quot;{base_url}/cache/info&quot;)&#10;    if response.status_code == 200:&#10;        cache_info = response.json()&#10;        print(f&quot;\nCache Info: {cache_info['total_keys']} keys, &quot;&#10;              f&quot;Hit rate: {cache_info['stats']['hit_rate_percent']}%&quot;)&#10;    else:&#10;        print(f&quot;\n⚠️  Cache info endpoint failed with status {response.status_code}&quot;)&#10;        if response.text:&#10;            print(f&quot;Error: {response.text[:200]}...&quot;)&#10;&#10;def test_headers_and_logging():&#10;    &quot;&quot;&quot;Test custom headers and logging features&quot;&quot;&quot;&#10;    print(&quot;\n Testing Headers and Logging...&quot;)&#10;&#10;    response = requests.post(f&quot;{base_url}/power&quot;, json={&quot;base&quot;: 3, &quot;exponent&quot;: 4})&#10;&#10;    print(&quot;Response Headers:&quot;)&#10;    print(f&quot;  Request ID: {response.headers.get('X-Request-ID', 'Not found')}&quot;)&#10;    print(f&quot;  Processing Time: {response.headers.get('X-Processing-Time-MS', 'Not found')}ms&quot;)&#10;    print(f&quot;  Content Type: {response.headers.get('Content-Type', 'Not found')}&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;=== Math Microservice Advanced Features Test ===&quot;)&#10;    print(&quot;Testing Phase 3 (Logging &amp; Error Handling) + Phase 4 (Caching)&quot;)&#10;&#10;    try:&#10;        test_caching_performance()&#10;        test_cache_management()&#10;        test_error_handling()&#10;        test_validation_errors()&#10;        test_performance_monitoring()&#10;        test_headers_and_logging()&#10;&#10;        print(&quot;\n✅ All tests completed!&quot;)&#10;        print(&quot;\nCheck your logs for detailed JSON output!&quot;)&#10;        print(&quot;Visit http://127.0.0.1:8000/docs to see the enhanced API documentation&quot;)&#10;&#10;    except requests.exceptions.ConnectionError:&#10;        print(&quot;❌ Cannot connect to the API. Make sure the server is running:&quot;)&#10;        print(&quot;   uvicorn app.main:app --reload&quot;)&#10;    except Exception as e:&#10;        print(f&quot;❌ Test failed with error: {e}&quot;)" />
              <option name="updatedContent" value="import requests&#10;import time&#10;import json&#10;&#10;base_url = &quot;http://127.0.0.1:8000/api/v1/math&quot;&#10;&#10;def test_caching_performance():&#10;    &quot;&quot;&quot;Test cache performance with repeated requests&quot;&quot;&quot;&#10;    print(&quot;Testing Cache Performance...&quot;)&#10;&#10;    # Test same calculation multiple times&#10;    test_cases = [&#10;        {&quot;endpoint&quot;: &quot;power&quot;, &quot;data&quot;: {&quot;base&quot;: 2, &quot;exponent&quot;: 10}},&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: 30}},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {&quot;n&quot;: 10}}&#10;    ]&#10;&#10;    for case in test_cases:&#10;        print(f&quot;\n--- Testing {case['endpoint']} caching ---&quot;)&#10;        endpoint = f&quot;{base_url}/{case['endpoint']}&quot;&#10;&#10;        # First request (cache miss)&#10;        start = time.time()&#10;        response1 = requests.post(endpoint, json=case['data'])&#10;        time1 = time.time() - start&#10;&#10;        # Second request (should be cache hit)&#10;        start = time.time()&#10;        response2 = requests.post(endpoint, json=case['data'])&#10;        time2 = time.time() - start&#10;&#10;        # Third request (should also be cache hit)&#10;        start = time.time()&#10;        response3 = requests.post(endpoint, json=case['data'])&#10;        time3 = time.time() - start&#10;&#10;        print(f&quot;First request (cache miss):  {time1*1000:.2f}ms&quot;)&#10;        print(f&quot;Second request (cache hit):  {time2*1000:.2f}ms&quot;)&#10;        print(f&quot;Third request (cache hit):   {time3*1000:.2f}ms&quot;)&#10;&#10;        if response1.status_code == 200:&#10;            result = response1.json()['result']&#10;            print(f&quot;Result: {result}&quot;)&#10;            print(f&quot;Speed improvement: {((time1-time2)/time1*100):.1f}%&quot;)&#10;        else:&#10;            print(f&quot;Error: {response1.text}&quot;)&#10;&#10;def test_cache_management():&#10;    &quot;&quot;&quot;Test cache management endpoints&quot;&quot;&quot;&#10;    print(&quot;\nTesting Cache Management...&quot;)&#10;&#10;    # Get cache stats&#10;    response = requests.get(f&quot;{base_url}/cache/stats&quot;)&#10;    if response.status_code == 200:&#10;        stats = response.json()&#10;        print(f&quot;Cache Stats: {json.dumps(stats, indent=2)}&quot;)&#10;&#10;    # Get cache info&#10;    response = requests.get(f&quot;{base_url}/cache/info&quot;)&#10;    if response.status_code == 200:&#10;        info = response.json()&#10;        print(f&quot;Cache has {info['total_keys']} keys&quot;)&#10;        print(f&quot;Hit rate: {info['stats']['hit_rate_percent']}%&quot;)&#10;&#10;    # Clear cache&#10;    response = requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;    if response.status_code == 200:&#10;        result = response.json()&#10;        print(f&quot;Cache cleared: {result['message']}&quot;)&#10;&#10;def test_error_handling():&#10;    &quot;&quot;&quot;Test enhanced error handling&quot;&quot;&quot;&#10;    print(&quot;\nTesting Error Handling...&quot;)&#10;&#10;    error_cases = [&#10;        {&quot;endpoint&quot;: &quot;power&quot;, &quot;data&quot;: {&quot;base&quot;: 2, &quot;exponent&quot;: 1000}, &quot;description&quot;: &quot;Power overflow&quot;},&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: -5}, &quot;description&quot;: &quot;Negative fibonacci&quot;},&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: 2000}, &quot;description&quot;: &quot;Fibonacci too large&quot;},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {&quot;n&quot;: -1}, &quot;description&quot;: &quot;Negative factorial&quot;},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {&quot;n&quot;: 200}, &quot;description&quot;: &quot;Factorial too large&quot;},&#10;    ]&#10;&#10;    for case in error_cases:&#10;        endpoint = f&quot;{base_url}/{case['endpoint']}&quot;&#10;        response = requests.post(endpoint, json=case['data'])&#10;&#10;        print(f&quot;\n{case['description']}:&quot;)&#10;        print(f&quot;Status Code: {response.status_code}&quot;)&#10;        if response.status_code != 200:&#10;            error_detail = response.json()&#10;            print(f&quot;Error Type: {error_detail.get('error_type', 'Unknown')}&quot;)&#10;            print(f&quot;Message: {error_detail.get('error', 'No message')}&quot;)&#10;&#10;def test_validation_errors():&#10;    &quot;&quot;&quot;Test input validation errors&quot;&quot;&quot;&#10;    print(&quot;\nTesting Input Validation...&quot;)&#10;&#10;    validation_cases = [&#10;        {&quot;endpoint&quot;: &quot;power&quot;, &quot;data&quot;: {&quot;base&quot;: &quot;not_a_number&quot;, &quot;exponent&quot;: 2}},&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: &quot;invalid&quot;}},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {}},  # Missing required field&#10;    ]&#10;&#10;    for case in validation_cases:&#10;        endpoint = f&quot;{base_url}/{case['endpoint']}&quot;&#10;        response = requests.post(endpoint, json=case['data'])&#10;&#10;        print(f&quot;\nTesting {case['endpoint']} with invalid data:&quot;)&#10;        print(f&quot;Status Code: {response.status_code}&quot;)&#10;        if response.status_code == 422:&#10;            error_detail = response.json()&#10;            print(f&quot;Validation errors: {len(error_detail.get('details', []))}&quot;)&#10;&#10;def test_performance_monitoring():&#10;    &quot;&quot;&quot;Test performance monitoring features&quot;&quot;&quot;&#10;    print(&quot;\nTesting Performance Monitoring...&quot;)&#10;&#10;    # Make several requests to generate data&#10;    for i in range(5):&#10;        requests.post(f&quot;{base_url}/power&quot;, json={&quot;base&quot;: 2, &quot;exponent&quot;: i+1})&#10;        requests.post(f&quot;{base_url}/fibonacci&quot;, json={&quot;n&quot;: i*2})&#10;&#10;    # Check operation stats&#10;    response = requests.get(f&quot;{base_url}/stats&quot;)&#10;    if response.status_code == 200:&#10;        stats = response.json()&#10;        print(&quot;Operation Statistics:&quot;)&#10;        for stat in stats:&#10;            print(f&quot;  {stat['operation']}: {stat['total_requests']} requests, &quot;&#10;                  f&quot;{stat['success_rate']}% success, &quot;&#10;                  f&quot;{stat['avg_execution_time_ms']}ms avg&quot;)&#10;&#10;    # Check history&#10;    response = requests.get(f&quot;{base_url}/history?page_size=5&quot;)&#10;    if response.status_code == 200:&#10;        history = response.json()&#10;        print(f&quot;\nRecent History ({history['total_records']} total records):&quot;)&#10;        for req in history['requests'][:3]:&#10;            # Handle None results for failed operations&#10;            result_display = req['result'] if req['result'] is not None else &quot;FAILED&quot;&#10;            success_indicator = &quot;✓&quot; if req['success'] else &quot;✗&quot;&#10;            exec_time = req.get('execution_time_ms', 0) or 0&#10;            print(f&quot;  {success_indicator} {req['operation']}: {result_display} &quot;&#10;                  f&quot;({exec_time:.3f}ms)&quot;)&#10;&#10;    # Test cache info endpoint (this was failing before)&#10;    response = requests.get(f&quot;{base_url}/cache/info&quot;)&#10;    if response.status_code == 200:&#10;        cache_info = response.json()&#10;        print(f&quot;\nCache Info: {cache_info['total_keys']} keys, &quot;&#10;              f&quot;Hit rate: {cache_info['stats']['hit_rate_percent']}%&quot;)&#10;    else:&#10;        print(f&quot;\nCache info endpoint failed with status {response.status_code}&quot;)&#10;        if response.text:&#10;            print(f&quot;Error: {response.text[:200]}...&quot;)&#10;&#10;def test_headers_and_logging():&#10;    &quot;&quot;&quot;Test custom headers and logging features&quot;&quot;&quot;&#10;    print(&quot;\nTesting Headers and Logging...&quot;)&#10;&#10;    response = requests.post(f&quot;{base_url}/power&quot;, json={&quot;base&quot;: 3, &quot;exponent&quot;: 4})&#10;&#10;    print(&quot;Response Headers:&quot;)&#10;    print(f&quot;  Request ID: {response.headers.get('X-Request-ID', 'Not found')}&quot;)&#10;    print(f&quot;  Processing Time: {response.headers.get('X-Processing-Time-MS', 'Not found')}ms&quot;)&#10;    print(f&quot;  Content Type: {response.headers.get('Content-Type', 'Not found')}&quot;)&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;=== Math Microservice Advanced Features Test ===&quot;)&#10;    print(&quot;Testing Phase 3 (Logging &amp; Error Handling) + Phase 4 (Caching)&quot;)&#10;&#10;    try:&#10;        test_caching_performance()&#10;        test_cache_management()&#10;        test_error_handling()&#10;        test_validation_errors()&#10;        test_performance_monitoring()&#10;        test_headers_and_logging()&#10;&#10;        print(&quot;\nAll tests completed!&quot;)&#10;        print(&quot;\nCheck your logs for detailed JSON output!&quot;)&#10;        print(&quot;Visit http://127.0.0.1:8000/docs to see the enhanced API documentation&quot;)&#10;&#10;    except requests.exceptions.ConnectionError:&#10;        print(&quot;❌ Cannot connect to the API. Make sure the server is running:&quot;)&#10;        print(&quot;   uvicorn app.main:app --reload&quot;)&#10;    except Exception as e:&#10;        print(f&quot;❌ Test failed with error: {e}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/test_cache_performance.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/test_cache_performance.py" />
              <option name="originalContent" value="import requests&#10;import time&#10;import statistics&#10;&#10;base_url = &quot;http://127.0.0.1:8000/api/v1/math&quot;&#10;&#10;&#10;def test_cache_performance_detailed():&#10;    &quot;&quot;&quot;Test cache performance with statistical analysis&quot;&quot;&quot;&#10;    print(&quot; Detailed Cache Performance Analysis&quot;)&#10;    print(&quot;=&quot; * 50)&#10;&#10;    # Clear cache to start fresh&#10;    requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;    print(&quot;Cache cleared - starting fresh\n&quot;)&#10;&#10;    test_cases = [&#10;        {&#10;            &quot;name&quot;: &quot;Power Calculation (2^50)&quot;,&#10;            &quot;endpoint&quot;: &quot;power&quot;,&#10;            &quot;data&quot;: {&quot;base&quot;: 2, &quot;exponent&quot;: 50}&#10;        },&#10;        {&#10;            &quot;name&quot;: &quot;Fibonacci (50th number)&quot;,&#10;            &quot;endpoint&quot;: &quot;fibonacci&quot;,&#10;            &quot;data&quot;: {&quot;n&quot;: 50}&#10;        },&#10;        {&#10;            &quot;name&quot;: &quot;Factorial (20!)&quot;,&#10;            &quot;endpoint&quot;: &quot;factorial&quot;,&#10;            &quot;data&quot;: {&quot;n&quot;: 20}&#10;        }&#10;    ]&#10;&#10;    for case in test_cases:&#10;        print(f&quot; Testing: {case['name']}&quot;)&#10;        print(&quot;-&quot; * 40)&#10;&#10;        endpoint = f&quot;{base_url}/{case['endpoint']}&quot;&#10;        miss_times = []&#10;        hit_times = []&#10;&#10;        # Test cache miss (first request)&#10;        print(&quot;Cache Miss Tests (first calculation):&quot;)&#10;        for i in range(3):&#10;            # Clear cache before each miss test&#10;            requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;&#10;            start = time.time()&#10;            response = requests.post(endpoint, json=case['data'])&#10;            end = time.time()&#10;&#10;            if response.status_code == 200:&#10;                miss_time = (end - start) * 1000&#10;                miss_times.append(miss_time)&#10;                result = response.json()['result']&#10;                print(f&quot;  Miss #{i + 1}: {miss_time:.2f}ms -&gt; Result: {result}&quot;)&#10;            else:&#10;                print(f&quot;  Miss #{i + 1}: FAILED ({response.status_code})&quot;)&#10;&#10;        # Test cache hits (subsequent requests)&#10;        print(&quot;Cache Hit Tests (cached results):&quot;)&#10;        for i in range(3):&#10;            start = time.time()&#10;            response = requests.post(endpoint, json=case['data'])&#10;            end = time.time()&#10;&#10;            if response.status_code == 200:&#10;                hit_time = (end - start) * 1000&#10;                hit_times.append(hit_time)&#10;                result = response.json()['result']&#10;                print(f&quot;  Hit #{i + 1}: {hit_time:.2f}ms -&gt; Result: {result}&quot;)&#10;            else:&#10;                print(f&quot;  Hit #{i + 1}: FAILED ({response.status_code})&quot;)&#10;&#10;        # Statistical analysis&#10;        if miss_times and hit_times:&#10;            avg_miss = statistics.mean(miss_times)&#10;            avg_hit = statistics.mean(hit_times)&#10;            improvement = ((avg_miss - avg_hit) / avg_miss) * 100&#10;&#10;            print(f&quot;\n Performance Analysis:&quot;)&#10;            print(f&quot;  Average Miss Time: {avg_miss:.2f}ms&quot;)&#10;            print(f&quot;  Average Hit Time:  {avg_hit:.2f}ms&quot;)&#10;            print(f&quot;  Performance Improvement: {improvement:.1f}%&quot;)&#10;&#10;            if improvement &gt; 0:&#10;                print(f&quot;  ✅ Cache is working! {improvement:.1f}% faster&quot;)&#10;            else:&#10;                print(f&quot;  ⚠️  Negative improvement - network/overhead effects&quot;)&#10;&#10;        print(&quot;\n&quot;)&#10;&#10;&#10;def test_cache_statistics():&#10;    &quot;&quot;&quot;Test cache statistics and management&quot;&quot;&quot;&#10;    print(&quot; Cache Statistics &amp; Management&quot;)&#10;    print(&quot;=&quot; * 50)&#10;&#10;    # Get initial stats&#10;    response = requests.get(f&quot;{base_url}/cache/stats&quot;)&#10;    if response.status_code == 200:&#10;        stats = response.json()['cache_statistics']&#10;        print(f&quot;Initial Cache Stats:&quot;)&#10;        print(f&quot;  Total Requests: {stats['hits'] + stats['misses']}&quot;)&#10;        print(f&quot;  Hit Rate: {stats['hit_rate_percent']}%&quot;)&#10;        print(f&quot;  Cache Size: {stats['current_size']}/{stats['max_size']}&quot;)&#10;        print(f&quot;  Uptime: {stats['uptime_seconds']:.1f}s&quot;)&#10;&#10;    # Test cache info endpoint&#10;    print(f&quot;\n Testing Cache Info Endpoint:&quot;)&#10;    response = requests.get(f&quot;{base_url}/cache/info&quot;)&#10;    if response.status_code == 200:&#10;        info = response.json()&#10;        print(f&quot;  ✅ Cache Info endpoint working&quot;)&#10;        print(f&quot;  Sample Keys: {len(info['sample_keys'])}&quot;)&#10;        if info['sample_keys']:&#10;            print(f&quot;  First Key Preview: {info['sample_keys'][0]}&quot;)&#10;    else:&#10;        print(f&quot;  ❌ Cache Info endpoint failed: {response.status_code}&quot;)&#10;        print(f&quot;  Error: {response.text[:200]}&quot;)&#10;&#10;    # Test cache clearing&#10;    print(f&quot;\n Testing Cache Clear:&quot;)&#10;    response = requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;    if response.status_code == 200:&#10;        result = response.json()&#10;        print(f&quot;  ✅ Cache cleared: {result['message']}&quot;)&#10;        print(f&quot;  Items removed: {result['items_removed']}&quot;)&#10;    else:&#10;        print(f&quot;  ❌ Cache clear failed: {response.status_code}&quot;)&#10;&#10;&#10;def test_complex_calculations():&#10;    &quot;&quot;&quot;Test caching with more complex calculations that show clear benefits&quot;&quot;&quot;&#10;    print(&quot; Complex Calculation Cache Benefits&quot;)&#10;    print(&quot;=&quot; * 50)&#10;&#10;    # Test with calculations that have more significant computation time&#10;    complex_tests = [&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: 100}, &quot;name&quot;: &quot;Fibonacci(100)&quot;},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {&quot;n&quot;: 50}, &quot;name&quot;: &quot;Factorial(50)&quot;},&#10;        {&quot;endpoint&quot;: &quot;power&quot;, &quot;data&quot;: {&quot;base&quot;: 1.5, &quot;exponent&quot;: 100}, &quot;name&quot;: &quot;1.5^100&quot;}&#10;    ]&#10;&#10;    # Clear cache&#10;    requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;&#10;    for test in complex_tests:&#10;        print(f&quot;\n Testing {test['name']}:&quot;)&#10;        endpoint = f&quot;{base_url}/{test['endpoint']}&quot;&#10;&#10;        # First request (cache miss)&#10;        print(&quot;  Computing for first time...&quot;)&#10;        start = time.time()&#10;        response1 = requests.post(endpoint, json=test['data'])&#10;        miss_time = (time.time() - start) * 1000&#10;&#10;        if response1.status_code == 200:&#10;            result = response1.json()['result']&#10;            print(f&quot;  First calculation: {miss_time:.2f}ms -&gt; {result}&quot;)&#10;&#10;            # Second request (cache hit)&#10;            print(&quot;  Retrieving from cache...&quot;)&#10;            start = time.time()&#10;            response2 = requests.post(endpoint, json=test['data'])&#10;            hit_time = (time.time() - start) * 1000&#10;&#10;            if response2.status_code == 200:&#10;                print(f&quot;  Cached retrieval: {hit_time:.2f}ms -&gt; {response2.json()['result']}&quot;)&#10;                improvement = ((miss_time - hit_time) / miss_time) * 100&#10;                print(f&quot;   Speed improvement: {improvement:.1f}%&quot;)&#10;            else:&#10;                print(f&quot;  Cache retrieval failed: {response2.status_code}&quot;)&#10;        else:&#10;            print(f&quot;  Calculation failed: {response1.status_code} - {response1.text}&quot;)&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;=== Math Microservice Cache Performance Analysis ===\n&quot;)&#10;&#10;    try:&#10;        test_cache_performance_detailed()&#10;        test_cache_statistics()&#10;        test_complex_calculations()&#10;&#10;        print(&quot;\n&quot; + &quot;=&quot; * 50)&#10;        print(&quot;✅ Cache Performance Analysis Complete!&quot;)&#10;        print(&quot;Key Insights:&quot;)&#10;        print(&quot;• Cache hits show performance benefit for calculation time&quot;)&#10;        print(&quot;• Total request time includes DB, middleware, and network overhead&quot;)&#10;        print(&quot;• More complex calculations show greater cache benefits&quot;)&#10;        print(&quot;• JSON structured logging provides detailed performance metrics&quot;)&#10;&#10;    except requests.exceptions.ConnectionError:&#10;        print(&quot;❌ Cannot connect to the API. Make sure the server is running:&quot;)&#10;        print(&quot;   uvicorn app.main:app --reload&quot;)&#10;    except Exception as e:&#10;        print(f&quot;❌ Test failed with error: {e}&quot;)" />
              <option name="updatedContent" value="import requests&#10;import time&#10;import statistics&#10;&#10;base_url = &quot;http://127.0.0.1:8000/api/v1/math&quot;&#10;&#10;&#10;def test_cache_performance_detailed():&#10;    &quot;&quot;&quot;Test cache performance with statistical analysis&quot;&quot;&quot;&#10;    print(&quot;Detailed Cache Performance Analysis&quot;)&#10;    print(&quot;=&quot; * 50)&#10;&#10;    # Clear cache to start fresh&#10;    requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;    print(&quot;Cache cleared - starting fresh\n&quot;)&#10;&#10;    test_cases = [&#10;        {&#10;            &quot;name&quot;: &quot;Power Calculation (2^50)&quot;,&#10;            &quot;endpoint&quot;: &quot;power&quot;,&#10;            &quot;data&quot;: {&quot;base&quot;: 2, &quot;exponent&quot;: 50}&#10;        },&#10;        {&#10;            &quot;name&quot;: &quot;Fibonacci (50th number)&quot;,&#10;            &quot;endpoint&quot;: &quot;fibonacci&quot;,&#10;            &quot;data&quot;: {&quot;n&quot;: 50}&#10;        },&#10;        {&#10;            &quot;name&quot;: &quot;Factorial (20!)&quot;,&#10;            &quot;endpoint&quot;: &quot;factorial&quot;,&#10;            &quot;data&quot;: {&quot;n&quot;: 20}&#10;        }&#10;    ]&#10;&#10;    for case in test_cases:&#10;        print(f&quot;Testing: {case['name']}&quot;)&#10;        print(&quot;-&quot; * 40)&#10;&#10;        endpoint = f&quot;{base_url}/{case['endpoint']}&quot;&#10;        miss_times = []&#10;        hit_times = []&#10;&#10;        # Test cache miss (first request)&#10;        print(&quot;Cache Miss Tests (first calculation):&quot;)&#10;        for i in range(3):&#10;            # Clear cache before each miss test&#10;            requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;&#10;            start = time.time()&#10;            response = requests.post(endpoint, json=case['data'])&#10;            end = time.time()&#10;&#10;            if response.status_code == 200:&#10;                miss_time = (end - start) * 1000&#10;                miss_times.append(miss_time)&#10;                result = response.json()['result']&#10;                print(f&quot;  Miss #{i + 1}: {miss_time:.2f}ms -&gt; Result: {result}&quot;)&#10;            else:&#10;                print(f&quot;  Miss #{i + 1}: FAILED ({response.status_code})&quot;)&#10;&#10;        # Test cache hits (subsequent requests)&#10;        print(&quot;Cache Hit Tests (cached results):&quot;)&#10;        for i in range(3):&#10;            start = time.time()&#10;            response = requests.post(endpoint, json=case['data'])&#10;            end = time.time()&#10;&#10;            if response.status_code == 200:&#10;                hit_time = (end - start) * 1000&#10;                hit_times.append(hit_time)&#10;                result = response.json()['result']&#10;                print(f&quot;  Hit #{i + 1}: {hit_time:.2f}ms -&gt; Result: {result}&quot;)&#10;            else:&#10;                print(f&quot;  Hit #{i + 1}: FAILED ({response.status_code})&quot;)&#10;&#10;        # Statistical analysis&#10;        if miss_times and hit_times:&#10;            avg_miss = statistics.mean(miss_times)&#10;            avg_hit = statistics.mean(hit_times)&#10;            improvement = ((avg_miss - avg_hit) / avg_miss) * 100&#10;&#10;            print(f&quot;\nPerformance Analysis:&quot;)&#10;            print(f&quot;  Average Miss Time: {avg_miss:.2f}ms&quot;)&#10;            print(f&quot;  Average Hit Time:  {avg_hit:.2f}ms&quot;)&#10;            print(f&quot;  Performance Improvement: {improvement:.1f}%&quot;)&#10;&#10;            if improvement &gt; 0:&#10;                print(f&quot;  Cache is working! {improvement:.1f}% faster&quot;)&#10;            else:&#10;                print(f&quot;  Negative improvement - network/overhead effects&quot;)&#10;&#10;        print(&quot;\n&quot;)&#10;&#10;&#10;def test_cache_statistics():&#10;    &quot;&quot;&quot;Test cache statistics and management&quot;&quot;&quot;&#10;    print(&quot;Cache Statistics &amp; Management&quot;)&#10;    print(&quot;=&quot; * 50)&#10;&#10;    # Get initial stats&#10;    response = requests.get(f&quot;{base_url}/cache/stats&quot;)&#10;    if response.status_code == 200:&#10;        stats = response.json()['cache_statistics']&#10;        print(f&quot;Initial Cache Stats:&quot;)&#10;        print(f&quot;  Total Requests: {stats['hits'] + stats['misses']}&quot;)&#10;        print(f&quot;  Hit Rate: {stats['hit_rate_percent']}%&quot;)&#10;        print(f&quot;  Cache Size: {stats['current_size']}/{stats['max_size']}&quot;)&#10;        print(f&quot;  Uptime: {stats['uptime_seconds']:.1f}s&quot;)&#10;&#10;    # Test cache info endpoint&#10;    print(f&quot;\nTesting Cache Info Endpoint:&quot;)&#10;    response = requests.get(f&quot;{base_url}/cache/info&quot;)&#10;    if response.status_code == 200:&#10;        info = response.json()&#10;        print(f&quot;  Cache Info endpoint working&quot;)&#10;        print(f&quot;  Sample Keys: {len(info['sample_keys'])}&quot;)&#10;        if info['sample_keys']:&#10;            print(f&quot;  First Key Preview: {info['sample_keys'][0]}&quot;)&#10;    else:&#10;        print(f&quot;  Cache Info endpoint failed: {response.status_code}&quot;)&#10;        print(f&quot;  Error: {response.text[:200]}&quot;)&#10;&#10;    # Test cache clearing&#10;    print(f&quot;\nTesting Cache Clear:&quot;)&#10;    response = requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;    if response.status_code == 200:&#10;        result = response.json()&#10;        print(f&quot;  Cache cleared: {result['message']}&quot;)&#10;        print(f&quot;  Items removed: {result['items_removed']}&quot;)&#10;    else:&#10;        print(f&quot;  Cache clear failed: {response.status_code}&quot;)&#10;&#10;&#10;def test_complex_calculations():&#10;    &quot;&quot;&quot;Test caching with more complex calculations that show clear benefits&quot;&quot;&quot;&#10;    print(&quot;Complex Calculation Cache Benefits&quot;)&#10;    print(&quot;=&quot; * 50)&#10;&#10;    # Test with calculations that have more significant computation time&#10;    complex_tests = [&#10;        {&quot;endpoint&quot;: &quot;fibonacci&quot;, &quot;data&quot;: {&quot;n&quot;: 100}, &quot;name&quot;: &quot;Fibonacci(100)&quot;},&#10;        {&quot;endpoint&quot;: &quot;factorial&quot;, &quot;data&quot;: {&quot;n&quot;: 50}, &quot;name&quot;: &quot;Factorial(50)&quot;},&#10;        {&quot;endpoint&quot;: &quot;power&quot;, &quot;data&quot;: {&quot;base&quot;: 1.5, &quot;exponent&quot;: 100}, &quot;name&quot;: &quot;1.5^100&quot;}&#10;    ]&#10;&#10;    # Clear cache&#10;    requests.post(f&quot;{base_url}/cache/clear&quot;)&#10;&#10;    for test in complex_tests:&#10;        print(f&quot;\nTesting {test['name']}:&quot;)&#10;        endpoint = f&quot;{base_url}/{test['endpoint']}&quot;&#10;&#10;        # First request (cache miss)&#10;        print(&quot;  Computing for first time...&quot;)&#10;        start = time.time()&#10;        response1 = requests.post(endpoint, json=test['data'])&#10;        miss_time = (time.time() - start) * 1000&#10;&#10;        if response1.status_code == 200:&#10;            result = response1.json()['result']&#10;            print(f&quot;  First calculation: {miss_time:.2f}ms -&gt; {result}&quot;)&#10;&#10;            # Second request (cache hit)&#10;            print(&quot;  Retrieving from cache...&quot;)&#10;            start = time.time()&#10;            response2 = requests.post(endpoint, json=test['data'])&#10;            hit_time = (time.time() - start) * 1000&#10;&#10;            if response2.status_code == 200:&#10;                print(f&quot;  Cached retrieval: {hit_time:.2f}ms -&gt; {response2.json()['result']}&quot;)&#10;                improvement = ((miss_time - hit_time) / miss_time) * 100&#10;                print(f&quot;  Speed improvement: {improvement:.1f}%&quot;)&#10;            else:&#10;                print(f&quot;  Cache retrieval failed: {response2.status_code}&quot;)&#10;        else:&#10;            print(f&quot;  Calculation failed: {response1.status_code} - {response1.text}&quot;)&#10;&#10;&#10;if __name__ == &quot;__main__&quot;:&#10;    print(&quot;=== Math Microservice Cache Performance Analysis ===\n&quot;)&#10;&#10;    try:&#10;        test_cache_performance_detailed()&#10;        test_cache_statistics()&#10;        test_complex_calculations()&#10;&#10;        print(&quot;\n&quot; + &quot;=&quot; * 50)&#10;        print(&quot;Cache Performance Analysis Complete!&quot;)&#10;        print(&quot;Key Insights:&quot;)&#10;        print(&quot;• Cache hits show performance benefit for calculation time&quot;)&#10;        print(&quot;• Total request time includes DB, middleware, and network overhead&quot;)&#10;        print(&quot;• More complex calculations show greater cache benefits&quot;)&#10;        print(&quot;• JSON structured logging provides detailed performance metrics&quot;)&#10;&#10;    except requests.exceptions.ConnectionError:&#10;        print(&quot;❌ Cannot connect to the API. Make sure the server is running:&quot;)&#10;        print(&quot;   uvicorn app.main:app --reload&quot;)&#10;    except Exception as e:&#10;        print(f&quot;❌ Test failed with error: {e}&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>